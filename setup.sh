#!/usr/bin/env bash
spacer='----------------------------------------------------------------'

# Error handling
# http://stackoverflow.com/questions/2870992/automatic-exit-from-bash-shell-script-on-error
abort() {
	echo "ERROR: Setup was interrupted"
	exit 1
}

trap 'abort' 0

# Check that user is not root
if [[ "${EUID}" == "0" ]]; then
	echo "Please call this script as a regular user."
	exit 1
fi

# Determine absolute path
if [[ ! -d "${abs_path}" ]]; then
	abs_path="${BASH_SOURCE[0]}"

	if [ -h "${abs_path}" ]; then
		while [ -h "${abs_path}" ]; do
			abs_path=$(readlink "${abs_path}")
		done
	fi

	pushd . >/dev/null
	cd $(dirname ${abs_path}) >/dev/null
	abs_path=$(pwd)
	popd >/dev/null
fi

# Source scripts
source script/filesystem.sh
source script/distro.sh
source script/flags.sh
source script/package.sh

# This function creates a symbolic link from '${1}' (source) to '${2] (target)'
link() {
	local target="${1}"
	local name="${2}"

	echo "- '${target}' -> '${name}'"

	# Check for required params
	[[ -z "${target}" ]] && echo "Error linking: Source path is empty" && return 1
	[[ -z "${name}" ]] && echo "Error linking: Target path is empty" && return 1

	# Check that file exists
	if [[ ! -e "${target}" ]]; then
		echo "Error creating link: The specified file or directory '${target}' does not exist"
	else
		if [[ -e "${name}" ]]; then
			if [[ -f "${name}" ]] || [[ -d "${name}" ]]; then
				# File or folder. Back up if appropriate
				if [[ "${BACKUP_CURRENT}" == "true" ]]; then
					sudo mv "${name}" "${name}.old"
				fi
			fi
			rm -rf "${name}"
		fi
		[[ -e "${name}" ]] || ln -s "${target}" "${name}"
	fi
	return 0
}

determine_distro

echo "
Starting setup for '${distro}' in '${HOME}'"
echo "${spacer}"

parse_flags

if [[ "${NO_DEPS}" != "true" ]]; then
	echo "
    Installing dependencies:"
	echo "${spacer}"
	# Sync package managers
	package sync
	# Dependencies
	package git
	package curl
	package bash-completion
	package yaourt

	echo "
Done installing dependencies
    "
fi

# Create profile
echo '
Linking files'
echo "${spacer}"
link "${abs_path}/bash/.bash_profile" "${HOME}/.bash_profile"
link "${abs_path}/bash/.bashrc" "${HOME}/.bashrc"
link "${abs_path}/bash/.bash_logout" "${HOME}/.bash_logout"
# julia
link "${abs_path}/julia/.juliarc.jl" "${HOME}/.juliarc.jl"
# vim
link "${abs_path}/vim/.vimrc" "${HOME}/.vimrc"
# tmux
link "${abs_path}/tmux/.tmux.conf" "${HOME}/.tmux.conf"

source "${abs_path}/bash/.bash_profile"

if [[ "${NO_XORG}" != "true" ]]; then
	# xorg
	link "${abs_path}/xorg/.xinitrc" "${HOME}/.xinitrc"
	link "${abs_path}/xorg/.xprofile" "${HOME}/.xprofile"
	# vscode
	mkdir -p "${HOME}/.config/Code/User"
	link "${abs_path}/vscode/snippets" "${HOME}/.config/Code/User/snippets"
	link "${abs_path}/vscode/settings.json" "${HOME}/.config/Code/User/settings.json"
	# vscode insiders
	mkdir -p "${HOME}/.config/Code - Insiders/User"
	link "${abs_path}/vscode/snippets" "${HOME}/.config/Code - Insiders/User/snippets"
	link "${abs_path}/vscode/settings.json" "${HOME}/.config/Code - Insiders/User/settings.json"

	# [[ -e "${HOME}/.config/plasma-workspace/env/xprofile.sh" ]] && rm -f "${HOME}/.config/plasma-workspace/env/xprofile.sh"
	# touch "${HOME}/.config/plasma-workspace/env/xprofile.sh"
	# chmod +x "${HOME}/.config/plasma-workspace/env/xprofile.sh"
	# Generate xprofile file
	# mkdir -p "${HOME}/.config/plasma-workspace/env"
	# echo '#!/usr/bin/env bash' >"${HOME}/.config/plasma-workspace/env/xprofile.sh"
	# echo '# generated by dotfiles/setup.sh' >>"${HOME}/.config/plasma-workspace/env/xprofile.sh"
	# echo >>"${HOME}/.config/plasma-workspace/env/xprofile.sh"
	# echo 'source ~/.bashenv' >>"${HOME}/.config/plasma-workspace/env/xprofile.sh"
	# echo >>"${HOME}/.config/plasma-workspace/env/xprofile.sh"
fi

trap : 0

echo '
Setup completed
'
